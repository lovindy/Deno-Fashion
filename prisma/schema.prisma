// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id              String    @id
  email           String    @unique
  role            UserRole  @default(CUSTOMER)
  firstName       String
  lastName        String
  phone           String?
  dateOfBirth     DateTime?
  gender          Gender?
  imageUrl        String?
  isEmailVerified Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Profile & Preferences
  addresses        Address[]
  wishlist         WishlistItem[]
  cart             CartItem[]
  orders           Order[]
  reviews          Review[]
  sizeMeasurements UserMeasurement?

  // Marketing
  newsletterSubscription Boolean               @default(false)
  marketingPreferences   MarketingPreferences?

  @@map("users")
}

model UserMeasurement {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  chest     Float?
  waist     Float?
  hip       Float?
  inseam    Float?
  shoulder  Float?
  height    Float?
  weight    Float?
  updatedAt DateTime @updatedAt

  @@map("user_measurements")
}

// Product Management
model Product {
  id           String              @id @default(cuid())
  sku          String              @unique
  name         String
  description  String
  price        Decimal
  comparePrice Decimal? // Original price for discounts
  cost         Decimal // Manufacturing/purchase cost
  brandId      String
  brand        Brand               @relation(fields: [brandId], references: [id])
  categories   CategoryProduct[]
  collections  CollectionProduct[]

  // Inventory & Variants
  variants   ProductVariant[]
  isActive   Boolean          @default(true)
  isNew      Boolean          @default(false)
  isFeatured Boolean          @default(false)

  // Media
  images ProductImage[]
  videos ProductVideo[]

  // SEO & Marketing
  slug            String   @unique
  metaTitle       String?
  metaDescription String?
  keywords        String[]

  // Relationships
  reviews       Review[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]
  orderItems    OrderItem[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model ProductVariant {
  id         String         @id @default(cuid())
  productId  String
  product    Product        @relation(fields: [productId], references: [id])
  sku        String         @unique
  color      Color          @relation(fields: [colorId], references: [id])
  colorId    String
  size       Size           @relation(fields: [sizeId], references: [id])
  sizeId     String
  stock      Int            @default(0)
  stockAlert Int            @default(5) // Low stock alert threshold
  barcode    String?        @unique
  price      Decimal? // Optional variant-specific price
  images     ProductImage[]
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  logo        String?
  website     String?
  products    Product[]
  isActive    Boolean   @default(true)

  @@map("brands")
}

model Category {
  id          String            @id @default(cuid())
  name        String
  description String?
  slug        String            @unique
  parentId    String?
  parent      Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]        @relation("CategoryHierarchy")
  products    CategoryProduct[]
  isActive    Boolean           @default(true)

  @@map("categories")
}

model Collection {
  id          String              @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  products    CollectionProduct[]
  isActive    Boolean             @default(true)

  @@map("collections")
}

// Order Management
model Order {
  id              String         @id @default(cuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  orderNumber     String         @unique
  status          OrderStatus    @default(PENDING)
  items           OrderItem[]
  subtotal        Decimal
  tax             Decimal
  shipping        Decimal
  total           Decimal
  shippingAddress Address        @relation(fields: [addressId], references: [id])
  addressId       String
  payment         Payment?
  tracking        OrderTracking?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String         @id @default(cuid())
  orderId   String
  order     Order          @relation(fields: [orderId], references: [id])
  productId String
  product   Product        @relation(fields: [productId], references: [id])
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Decimal
  total     Decimal

  @@map("order_items")
}

model OrderTracking {
  id                String           @id @default(cuid())
  orderId           String           @unique
  order             Order            @relation(fields: [orderId], references: [id])
  carrier           String
  trackingNumber    String
  status            ShippingStatus
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  updates           TrackingUpdate[]

  @@map("order_tracking")
}

model TrackingUpdate {
  id          String         @id @default(cuid())
  trackingId  String
  tracking    OrderTracking  @relation(fields: [trackingId], references: [id])
  status      ShippingStatus
  location    String?
  description String?
  timestamp   DateTime       @default(now())

  @@map("tracking_updates")
}

// Payment Management
model Payment {
  id        String        @id @default(cuid())
  orderId   String        @unique
  order     Order         @relation(fields: [orderId], references: [id])
  amount    Decimal
  currency  String
  method    PaymentMethod
  status    PaymentStatus
  reference String?       @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("payments")
}

// Shopping Cart & Wishlist
model CartItem {
  id        String         @id @default(cuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  productId String
  product   Product        @relation(fields: [productId], references: [id])
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  quantity  Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@map("wishlist_items")
}

// Product Reviews & Ratings
model Review {
  id         String        @id @default(cuid())
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  productId  String
  product    Product       @relation(fields: [productId], references: [id])
  rating     Int           @db.SmallInt
  title      String?
  comment    String?
  images     ReviewImage[]
  isVerified Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("reviews")
}

// Supporting Models
model Address {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  type       AddressType
  isDefault  Boolean     @default(false)
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  orders     Order[]

  @@map("addresses")
}

model Color {
  id       String           @id @default(cuid())
  name     String           @unique
  hexCode  String
  variants ProductVariant[]

  @@map("colors")
}

model Size {
  id       String           @id @default(cuid())
  name     String           @unique
  category SizeCategory
  variants ProductVariant[]

  @@map("sizes")
}

model ProductImage {
  id        String          @id @default(cuid())
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  url       String
  alt       String?
  isDefault Boolean         @default(false)
  order     Int             @default(0)

  @@map("product_images")
}

model ProductVideo {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  url       String
  thumbnail String?
  title     String?
  order     Int     @default(0)

  @@map("product_videos")
}

model ReviewImage {
  id       String @id @default(cuid())
  reviewId String
  review   Review @relation(fields: [reviewId], references: [id])
  url      String

  @@map("review_images")
}

model MarketingPreferences {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  email       Boolean  @default(true)
  sms         Boolean  @default(false)
  push        Boolean  @default(false)
  lastUpdated DateTime @updatedAt

  @@map("marketing_preferences")
}

// Join Tables
model CategoryProduct {
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
  @@map("category_products")
}

model CollectionProduct {
  productId    String
  product      Product    @relation(fields: [productId], references: [id])
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])

  @@id([productId, collectionId])
  @@map("collection_products")
}

// Enums
enum UserRole {
  ADMIN
  CUSTOMER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  FAILED
  REFUNDED
  VOIDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CRYPTO
}

enum ShippingStatus {
  PROCESSING
  READY_FOR_PICKUP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED_DELIVERY
  RETURNED
}

enum SizeCategory {
  TOPS
  BOTTOMS
  SHOES
  ACCESSORIES
  ONE_SIZE
}
